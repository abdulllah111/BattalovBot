# -*- coding: utf-8 -*-
"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import os
import re
from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile

from app.db.engine import SessionLocal
from app.db.crud import get_or_create_user, mark_certificate_received
from app.services.image_generator import create_coupon_image

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞—à–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
class UserState(StatesGroup):
    awaiting_fio = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û

def is_valid_fio(fio: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –§–ò–û.
    """
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É
    if not (5 <= len(fio) <= 60):
        return False, "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤."

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã)
    if not re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]+", fio):
        return False, "–§–ò–û –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã."

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
    words = fio.split()
    if len(words) != 3:
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ —Ç—Ä–µ—Ö —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ)."

    # 4. –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–Ω–∞–±–æ—Ä –±—É–∫–≤"
    vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—èaeiouy"
    for word in words:
        if not any(char.lower() in vowels for char in word):
            return False, f"–°–ª–æ–≤–æ '{word}' –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        if all(char.lower() in vowels for char in word):
            return False, f"–°–ª–æ–≤–æ '{word}' –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."

    return True, ""

@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –§–ò–û.
    """
    db = SessionLocal()
    try:
        user = get_or_create_user(db, telegram_id=message.from_user.id)
        if user.has_certificate:
            await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –∫—É–ø–æ–Ω.")
            return

        welcome_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n\n"
            f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É–ø–æ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:"
        )
        await message.answer(welcome_text)
        await state.set_state(UserState.awaiting_fio)
    finally:
        db.close()

@router.message(UserState.awaiting_fio, F.text)
async def handle_fio(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è awaiting_fio.
    –ü–æ–ª—É—á–∞–µ—Ç –§–ò–û, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_fio = message.text.strip()
    telegram_id = message.from_user.id

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û ---
    is_valid, error_message = is_valid_fio(user_fio)
    if not is_valid:
        await message.answer(error_message + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    db = SessionLocal()
    try:
        user = get_or_create_user(db, telegram_id=telegram_id, full_name=user_fio)
        if user.has_certificate:
            await message.answer("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –∫—É–ø–æ–Ω.")
            return

        await message.answer("–í–∞—à –∫—É–ø–æ–Ω –≥–æ—Ç–æ–≤–∏—Ç—Å—è...")
        image_path = create_coupon_image(user_fio)

        if image_path and os.path.exists(image_path):
            file_to_send = FSInputFile(image_path)
            await message.answer_photo(file_to_send, caption="–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É–ø–æ–Ω –Ω–∞ —Å–∫–∏–¥–∫—É –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —É–º—Ä—ã, —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é –•–∞–¥–∂ –¶–µ–Ω—Ç—Ä: @hajjcenter‚ú®")
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–∞ –æ—Ç –î–∏–Ω–∏—Å–ª–∞–º–∞ –ë–∞—Ç—Ç–∞–ª–æ–≤–∞ ‚Äî –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É–º—Ä–∞! üïã‚ú®")
            mark_certificate_received(db, telegram_id)
            os.remove(image_path)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    finally:
        db.close()

    await state.clear()
